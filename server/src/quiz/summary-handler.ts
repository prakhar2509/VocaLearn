import { WebSocket } from "ws";
import { generateAndSendTTS } from "../murf";
import { getLanguageName } from "../utils/languages";
import { ClientSession } from "./types";

// Generate quiz summary text in the native language
const generateSummaryText = (
  score: number, 
  totalQuestions: number, 
  learningLanguageName: string, 
  nativeLanguage: string
): string => {
  const percentage = Math.round((score / totalQuestions) * 100);
  
  // Generate summary based on native language
  switch (nativeLanguage) {
    case 'es-ES':
      return `¬°Cuestionario completado! ... Obtuviste ${score} de ${totalQuestions} ... ¬°Eso es ${percentage} por ciento! ... ¬°Excelente trabajo practicando tu ${learningLanguageName}!`;
    
    case 'fr-FR':
      return `Quiz termin√©! ... Vous avez obtenu ${score} sur ${totalQuestions} ... C'est ${percentage} pour cent! ... Excellent travail en pratiquant votre ${learningLanguageName}!`;
    
    case 'hi-IN':
      return `‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§£! ... ‡§Ü‡§™‡§®‡•á ${score} ‡§Æ‡•á‡§Ç ‡§∏‡•á ${totalQuestions} ‡§Ö‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§è ... ‡§Ø‡§π ${percentage} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§π‡•à! ... ${learningLanguageName} ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ ‡§ï‡§æ‡§Æ!`;
    
    case 'de-DE':
      return `Quiz abgeschlossen! ... Sie haben ${score} von ${totalQuestions} erreicht ... Das sind ${percentage} Prozent! ... Gro√üartige Arbeit beim √úben Ihres ${learningLanguageName}!`;
    
    case 'it-IT':
      return `Quiz completato! ... Hai ottenuto ${score} su ${totalQuestions} ... √à il ${percentage} percento! ... Ottimo lavoro nel praticare il tuo ${learningLanguageName}!`;
    
    case 'jp-JP':
      return `„ÇØ„Ç§„Ç∫ÂÆå‰∫ÜÔºÅ ... ${totalQuestions}Âïè‰∏≠${score}ÂïèÊ≠£Ëß£ ... ${percentage}„Éë„Éº„Çª„É≥„Éà„Åß„ÅôÔºÅ ... ${learningLanguageName}„ÅÆÁ∑¥Áøí„ÄÅÁ¥†Êô¥„Çâ„Åó„ÅÑ‰ªï‰∫ã„Åß„ÅôÔºÅ`;
    
    case 'en-US':
    default:
      return `Quiz completed! ... You scored ${score} out of ${totalQuestions} ... That's ${percentage} percent! ... Great job practicing your ${learningLanguageName}!`;
  }
};
export const sendQuizSummary = async (
  ws: WebSocket,
  sessions: Map<WebSocket, ClientSession>
) => {
  const session = sessions.get(ws);
  if (!session || !session.quiz) return;

  try {
    const { score, totalQuestions } = session.quiz;
    const percentage = Math.round((score / totalQuestions) * 100);
    
    // Get language names instead of codes
    const learningLanguageName = getLanguageName(session.learningLanguage);
    
    // Generate summary text in the native language with pauses
    const summaryText = generateSummaryText(score, totalQuestions, learningLanguageName, session.nativeLanguage);

    console.log(`üéâ Quiz completed - Score: ${score}/${totalQuestions}`);

    // Generate summary audio
    const summaryAudio = await generateAndSendTTS(
      ws,
      summaryText,
      session.nativeLanguage,
      "explanation"
    );

    // Send summary to client
    ws.send(JSON.stringify({
      type: "quiz_summary",
      score,
      totalQuestions,
      percentage,
      summary: summaryText,
      summaryAudioUrl: summaryAudio,
      questions: session.quiz.questions, // Send all questions and answers for review
    }));

    // Reset quiz state
    session.quiz = undefined;

  } catch (error) {
    console.error("‚ùå Error sending quiz summary:", error);
    ws.send(JSON.stringify({ error: "Failed to generate quiz summary" }));
  }
};

// Generate early quiz ending text in the native language
const generateEarlyEndText = (
  score: number,
  currentQuestion: number,
  totalQuestions: number,
  reason: string,
  learningLanguageName: string,
  nativeLanguage: string
): string => {
  switch (nativeLanguage) {
    case 'es-ES':
      return `Cuestionario terminado despu√©s de ${currentQuestion} de ${totalQuestions} preguntas. ... Obtuviste ${score} de ${currentQuestion}. ... ${reason}`;
    
    case 'fr-FR':
      return `Quiz termin√© apr√®s ${currentQuestion} sur ${totalQuestions} questions. ... Vous avez obtenu ${score} sur ${currentQuestion}. ... ${reason}`;
    
    case 'hi-IN':
      return `${totalQuestions} ‡§Æ‡•á‡§Ç ‡§∏‡•á ${currentQuestion} ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§§‡•ç‡§§‡§∞‡•Ä ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§‡•§ ... ‡§Ü‡§™‡§®‡•á ${currentQuestion} ‡§Æ‡•á‡§Ç ‡§∏‡•á ${score} ‡§Ö‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§è‡•§ ... ${reason}`;
    
    case 'de-DE':
      return `Quiz nach ${currentQuestion} von ${totalQuestions} Fragen beendet. ... Sie haben ${score} von ${currentQuestion} erreicht. ... ${reason}`;
    
    case 'it-IT':
      return `Quiz terminato dopo ${currentQuestion} di ${totalQuestions} domande. ... Hai ottenuto ${score} su ${currentQuestion}. ... ${reason}`;
    
    case 'jp-JP':
      return `${totalQuestions}Âïè‰∏≠${currentQuestion}Âïè„Åß„ÇØ„Ç§„Ç∫ÁµÇ‰∫Ü„ÄÇ ... ${currentQuestion}Âïè‰∏≠${score}ÂïèÊ≠£Ëß£„ÄÇ ... ${reason}`;
    
    case 'en-US':
    default:
      return `Quiz ended after ${currentQuestion} of ${totalQuestions} questions. ... You scored ${score} out of ${currentQuestion}. ... ${reason}`;
  }
};

export const endQuizEarly = async (
  ws: WebSocket,
  sessions: Map<WebSocket, ClientSession>,
  reason: string = "Quiz ended by user"
) => {
  const session = sessions.get(ws);
  if (!session || !session.quiz) return;

  console.log(`üõë Quiz ended early: ${reason}`);
  
  // Send early termination summary
  const { score, currentQuestion, totalQuestions } = session.quiz;
  
  // Get language name and generate summary text in native language
  const learningLanguageName = getLanguageName(session.learningLanguage);
  const summaryText = generateEarlyEndText(score, currentQuestion, totalQuestions, reason, learningLanguageName, session.nativeLanguage);

  try {
    // Generate summary audio
    const summaryAudio = await generateAndSendTTS(
      ws,
      summaryText,
      session.nativeLanguage,
      "explanation"
    );

    // Send early end summary
    ws.send(JSON.stringify({
      type: "quiz_ended_early",
      reason,
      score,
      questionsAnswered: currentQuestion,
      totalQuestions,
      summary: summaryText,
      summaryAudioUrl: summaryAudio,
      questions: session.quiz.questions.slice(0, currentQuestion), // Only answered questions
    }));

    // Reset quiz state
    session.quiz = undefined;

  } catch (error) {
    console.error("‚ùå Error ending quiz early:", error);
    ws.send(JSON.stringify({ error: "Failed to end quiz" }));
  }
};
